what this class will cover:
-types of variables
-logical operators
-lists and arrays
-hashes
-selection: if
-repitition: while
-files and directories
-command line arguments
-user defined functions


in general scripted languages do not provide as good errors as compile languages
hello_world

use warnings;
print "Hello\n"

running it:
$perl hello_world
Hello
$
First line
shebang [#!]
insert into first line: #!/usr/bin/perl
shebang identifies to compiler to use the following directory, perl in this case

if line is in place on the first line of the program, can just run as its own script
as opposed to prefacing it with perl ($hello_world vs $perl hello_world)

windows operating system command line tip:
executing the script
$chmod +x hello_world
chmod changes permissions
+x executes the following script
can also use u+x to identify that only the current user can execute it


$y=4;
$y is an integer without explicitly typing it as one
variables must be headed with a $
# is for comments, compiler ignores it

#lecture 1 example 1
use warnings;
print "Enter a number: ";
$value = <STDIN>;
if($value > 0)
	{
	print "your number is positive.\n";
	}
elsif($value<0)
	{
	print "your number is negative.\n";
	}
else
	{
	print "your number is 0.\n";
	}
	
scalar:
-number
--integer
--decimal:floating point
-string
-reference
-undefined

$val="42";

#!/usr/bin/perl
#lecture 2 example 1 revised
$a = "2.17";
$b = "2.170000";
$c = "2.17joy in Mudville";
print "Iniial string values\n";
print $a; 2.17
print $b; 2.170000
print $c; 2.17joy in Mudville

$a +=0; 2.17
$b +=0; 2.17
$c +=0; 2.17

when operating on a variable that requires the variable to be a number, it will drop everything
after the point that makes it not a number

$d = "2.17joy in Mudville"
$d =~ m/^([0-9]*\.[0-9]*/); pattern matches to d and stores it in buffer $1
$d = $1 +0;

$a .= "";
$b .= "";
$c .= "";
transforming an string into a number causes you to lose the information that cant be stored as a number
.= operator is the concatenation operator

integer 123
octal 0123
hexadecimal 0x123
123_457_789
when dealing with decimals underlines dont mean anything

decimal point -> floating point
not 0x E ->scientific
operating systems tend to run in octal

integer division
7/3 -> 2.3333 quotient, always floating point
7/%3 -> 1 remainder, always integer
** power

5.9 % 2.1
converts to integer(by throwing fractional part away)
5%2 = 1

perl will usually try to change the typing to make things work
therefore it is difficult to get an error in perl
perl is designed to be a nonstopping language, it will ignore small hiccups
use warnings helps a little but not completely